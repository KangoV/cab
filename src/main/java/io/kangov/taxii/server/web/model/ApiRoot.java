/*
 * TAXII Client API
 * TAXII Client API (2.1)
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kangov.taxii.server.web.model;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;

import io.kangov.taxii.server.ImmutableStyle;
import io.micronaut.core.annotation.*;
import org.immutables.value.Value;

import java.util.*;

/**
 * The api-root resource contains general information about the API Root, such as a human-readable title and
 * description, the TAXII versions it supports, and the maximum size (max_content_length) of the content body it will
 * accept in a PUT or POST request.
 */
@JsonPropertyOrder({
    ApiRoot.JSON_PROPERTY_TITLE,
    ApiRoot.JSON_PROPERTY_DESCRIPTION,
    ApiRoot.JSON_PROPERTY_VERSIONS,
    ApiRoot.JSON_PROPERTY_MAX_CONTENT_LENGTH
    })
@JsonTypeName("api-root")
@JsonSerialize(as = ApiRootImpl.class)
@JsonDeserialize(as = ApiRootImpl.class)
@Introspected
@Value.Immutable
@ImmutableStyle
public interface ApiRoot {

//    /**
//     * Exposes the generated builder outside this package
//     * <p>
//     * While the generated implementation (and consequently its builder) is not
//     * visible outside this package, this builder inherits and exposes all public
//     * methods defined on the generated implementation's Builder class.
//     */
////    @Introspected
//    class Builder extends ApiRootImpl.Builder {}
//
//    static ApiRoot create(UnaryOperator<ApiRoot.Builder> spec) { return spec.apply(builder()).build(); }
//    static ApiRoot createApiRoot(UnaryOperator<ApiRoot.Builder> spec) { return create(spec); }
//    static ApiRoot.Builder builder() { return new ApiRoot.Builder(); }
//
//    default ApiRoot update(UnaryOperator<ApiRoot.Builder> builder) {
//        return builder.apply(new ApiRoot.Builder()).build();
//    }

    String JSON_PROPERTY_TITLE = "title";
    String JSON_PROPERTY_DESCRIPTION = "description";
    String JSON_PROPERTY_VERSIONS = "versions";
    String JSON_PROPERTY_MAX_CONTENT_LENGTH = "max_content_length";

    /**
     * Returns a human-readable plain text name used to identify this API instance.
     * @return title
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    String getTitle();

    /**
     * Returns a human-readable plain text description for this API Root.
     * @return description
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    String getDescription();

    /**
     * Returns the list of TAXII versions that this API Root is compatible with. The values listed in this property MUST match
     * the media types defined in Section 1.6.8.1 and MUST include the optional version parameter.  A value of
     * application/taxii+json;version&#x3D;2.1 MUST be included in this list to indicate conformance with this
     * specification.
     *
     * @return versions
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_VERSIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    Set<String> getVersions();

    /**
     * The maximum size of the request body in octets (8-bit bytes) that the server can support. The value of the
     * max_content_length MUST be a positive integer greater than zero. This applies to requests only and is determined
     * by the server. Requests with total body length values smaller than this value MUST NOT result in an HTTP 413
     * (Request Entity Too Large) response. If for example, the server supported 100 MB of data, the value for this
     * property would be determined by 100*1024*1024 which equals 104,857,600. This property contains useful information
     * for the client when it POSTs requests to the Add Objects endpoint.
     *
     * @return maxContentLength
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MAX_CONTENT_LENGTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    Integer getMaxContentLength();

}
