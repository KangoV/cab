package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.StatusDetails;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link StatusDetails} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class StatusDetailsAssert extends AbstractObjectAssert<StatusDetailsAssert, StatusDetails> {

  /**
   * Creates a new <code>{@link StatusDetailsAssert}</code> to make assertions on actual StatusDetails.
   * @param actual the StatusDetails we want to make assertions on.
   */
  public StatusDetailsAssert(StatusDetails actual) {
    super(actual, StatusDetailsAssert.class);
  }

  /**
   * An entry point for StatusDetailsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myStatusDetails)</code> and get specific assertion with code completion.
   * @param actual the StatusDetails we want to make assertions on.
   * @return a new <code>{@link StatusDetailsAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static StatusDetailsAssert assertThat(StatusDetails actual) {
    return new StatusDetailsAssert(actual);
  }

  /**
   * Verifies that the actual StatusDetails's id is equal to the given one.
   * @param id the given id to compare the actual StatusDetails's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual StatusDetails's id is not equal to the given one.
   */
  public StatusDetailsAssert hasId(java.util.UUID id) {
    // check that actual StatusDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.deepEquals(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual StatusDetails's message is equal to the given one.
   * @param message the given message to compare the actual StatusDetails's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual StatusDetails's message is not equal to the given one.
   */
  public StatusDetailsAssert hasMessage(String message) {
    // check that actual StatusDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualMessage = actual.getMessage();
    if (!Objects.deepEquals(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual StatusDetails's version is equal to the given one.
   * @param version the given version to compare the actual StatusDetails's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual StatusDetails's version is not equal to the given one.
   */
  public StatusDetailsAssert hasVersion(java.time.OffsetDateTime version) {
    // check that actual StatusDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.OffsetDateTime actualVersion = actual.getVersion();
    if (!Objects.deepEquals(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

}
