package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.Collection;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link Collection} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class CollectionAssert extends AbstractObjectAssert<CollectionAssert, Collection> {

  /**
   * Creates a new <code>{@link CollectionAssert}</code> to make assertions on actual Collection.
   * @param actual the Collection we want to make assertions on.
   */
  public CollectionAssert(Collection actual) {
    super(actual, CollectionAssert.class);
  }

  /**
   * An entry point for CollectionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCollection)</code> and get specific assertion with code completion.
   * @param actual the Collection we want to make assertions on.
   * @return a new <code>{@link CollectionAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static CollectionAssert assertThat(Collection actual) {
    return new CollectionAssert(actual);
  }

  /**
   * Verifies that the actual Collection's alias is equal to the given one.
   * @param alias the given alias to compare the actual Collection's alias to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Collection's alias is not equal to the given one.
   */
  public CollectionAssert hasAlias(String alias) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting alias of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAlias = actual.getAlias();
    if (!Objects.deepEquals(actualAlias, alias)) {
      failWithMessage(assertjErrorMessage, actual, alias, actualAlias);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's canRead is equal to the given one.
   * @param canRead the given canRead to compare the actual Collection's canRead to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Collection's canRead is not equal to the given one.
   */
  public CollectionAssert hasCanRead(Boolean canRead) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting canRead of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualCanRead = actual.getCanRead();
    if (!Objects.deepEquals(actualCanRead, canRead)) {
      failWithMessage(assertjErrorMessage, actual, canRead, actualCanRead);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's canWrite is equal to the given one.
   * @param canWrite the given canWrite to compare the actual Collection's canWrite to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Collection's canWrite is not equal to the given one.
   */
  public CollectionAssert hasCanWrite(Boolean canWrite) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting canWrite of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualCanWrite = actual.getCanWrite();
    if (!Objects.deepEquals(actualCanWrite, canWrite)) {
      failWithMessage(assertjErrorMessage, actual, canWrite, actualCanWrite);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's description is equal to the given one.
   * @param description the given description to compare the actual Collection's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Collection's description is not equal to the given one.
   */
  public CollectionAssert hasDescription(String description) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.deepEquals(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's id is equal to the given one.
   * @param id the given id to compare the actual Collection's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Collection's id is not equal to the given one.
   */
  public CollectionAssert hasId(java.util.UUID id) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.deepEquals(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's mediaTypes contains the given String elements.
   * @param mediaTypes the given elements that should be contained in actual Collection's mediaTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Collection's mediaTypes does not contain all given String elements.
   */
  public CollectionAssert hasMediaTypes(String... mediaTypes) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (mediaTypes == null) failWithMessage("Expecting mediaTypes parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getMediaTypes(), mediaTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's mediaTypes contains the given String elements in Collection.
   * @param mediaTypes the given elements that should be contained in actual Collection's mediaTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Collection's mediaTypes does not contain all given String elements.
   */
  public CollectionAssert hasMediaTypes(java.util.Collection<? extends String> mediaTypes) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (mediaTypes == null) {
      failWithMessage("Expecting mediaTypes parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getMediaTypes(), mediaTypes.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's mediaTypes contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param mediaTypes the given elements that should be contained in actual Collection's mediaTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Collection's mediaTypes does not contain all given String elements.
   */
  public CollectionAssert hasOnlyMediaTypes(String... mediaTypes) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (mediaTypes == null) failWithMessage("Expecting mediaTypes parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getMediaTypes(), mediaTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's mediaTypes contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param mediaTypes the given elements that should be contained in actual Collection's mediaTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Collection's mediaTypes does not contain all given String elements.
   */
  public CollectionAssert hasOnlyMediaTypes(java.util.Collection<? extends String> mediaTypes) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (mediaTypes == null) {
      failWithMessage("Expecting mediaTypes parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getMediaTypes(), mediaTypes.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's mediaTypes does not contain the given String elements.
   *
   * @param mediaTypes the given elements that should not be in actual Collection's mediaTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Collection's mediaTypes contains any given String elements.
   */
  public CollectionAssert doesNotHaveMediaTypes(String... mediaTypes) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (mediaTypes == null) failWithMessage("Expecting mediaTypes parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getMediaTypes(), mediaTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection's mediaTypes does not contain the given String elements in Collection.
   *
   * @param mediaTypes the given elements that should not be in actual Collection's mediaTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Collection's mediaTypes contains any given String elements.
   */
  public CollectionAssert doesNotHaveMediaTypes(java.util.Collection<? extends String> mediaTypes) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (mediaTypes == null) {
      failWithMessage("Expecting mediaTypes parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getMediaTypes(), mediaTypes.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Collection has no mediaTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Collection's mediaTypes is not empty.
   */
  public CollectionAssert hasNoMediaTypes() {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have mediaTypes but had :\n  <%s>";

    // check
    if (actual.getMediaTypes().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getMediaTypes());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Collection's title is equal to the given one.
   * @param title the given title to compare the actual Collection's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Collection's title is not equal to the given one.
   */
  public CollectionAssert hasTitle(String title) {
    // check that actual Collection we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.deepEquals(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

}
