package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.Dictionary;
import io.kangov.taxii.server.web.model.Error;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link Error} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ErrorAssert extends AbstractObjectAssert<ErrorAssert, Error> {

  /**
   * Creates a new <code>{@link ErrorAssert}</code> to make assertions on actual Error.
   * @param actual the Error we want to make assertions on.
   */
  public ErrorAssert(Error actual) {
    super(actual, ErrorAssert.class);
  }

  /**
   * An entry point for ErrorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myError)</code> and get specific assertion with code completion.
   * @param actual the Error we want to make assertions on.
   * @return a new <code>{@link ErrorAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ErrorAssert assertThat(Error actual) {
    return new ErrorAssert(actual);
  }

  /**
   * Verifies that the actual Error's description is equal to the given one.
   * @param description the given description to compare the actual Error's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's description is not equal to the given one.
   */
  public ErrorAssert hasDescription(String description) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.deepEquals(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Error's details is equal to the given one.
   * @param details the given details to compare the actual Error's details to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's details is not equal to the given one.
   */
  public ErrorAssert hasDetails(Dictionary details) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting details of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Dictionary actualDetails = actual.getDetails();
    if (!Objects.deepEquals(actualDetails, details)) {
      failWithMessage(assertjErrorMessage, actual, details, actualDetails);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Error's errorCode is equal to the given one.
   * @param errorCode the given errorCode to compare the actual Error's errorCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's errorCode is not equal to the given one.
   */
  public ErrorAssert hasErrorCode(String errorCode) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting errorCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualErrorCode = actual.getErrorCode();
    if (!Objects.deepEquals(actualErrorCode, errorCode)) {
      failWithMessage(assertjErrorMessage, actual, errorCode, actualErrorCode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Error's errorId is equal to the given one.
   * @param errorId the given errorId to compare the actual Error's errorId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's errorId is not equal to the given one.
   */
  public ErrorAssert hasErrorId(String errorId) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting errorId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualErrorId = actual.getErrorId();
    if (!Objects.deepEquals(actualErrorId, errorId)) {
      failWithMessage(assertjErrorMessage, actual, errorId, actualErrorId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Error's externalDetails is equal to the given one.
   * @param externalDetails the given externalDetails to compare the actual Error's externalDetails to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's externalDetails is not equal to the given one.
   */
  public ErrorAssert hasExternalDetails(String externalDetails) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting externalDetails of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualExternalDetails = actual.getExternalDetails();
    if (!Objects.deepEquals(actualExternalDetails, externalDetails)) {
      failWithMessage(assertjErrorMessage, actual, externalDetails, actualExternalDetails);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Error's httpStatus is equal to the given one.
   * @param httpStatus the given httpStatus to compare the actual Error's httpStatus to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's httpStatus is not equal to the given one.
   */
  public ErrorAssert hasHttpStatus(String httpStatus) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting httpStatus of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualHttpStatus = actual.getHttpStatus();
    if (!Objects.deepEquals(actualHttpStatus, httpStatus)) {
      failWithMessage(assertjErrorMessage, actual, httpStatus, actualHttpStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Error's title is equal to the given one.
   * @param title the given title to compare the actual Error's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's title is not equal to the given one.
   */
  public ErrorAssert hasTitle(String title) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.deepEquals(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

}
