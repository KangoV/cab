package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.Manifest;
import io.kangov.taxii.server.web.model.ManifestRecord;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link Manifest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ManifestAssert extends AbstractObjectAssert<ManifestAssert, Manifest> {

  /**
   * Creates a new <code>{@link ManifestAssert}</code> to make assertions on actual Manifest.
   * @param actual the Manifest we want to make assertions on.
   */
  public ManifestAssert(Manifest actual) {
    super(actual, ManifestAssert.class);
  }

  /**
   * An entry point for ManifestAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myManifest)</code> and get specific assertion with code completion.
   * @param actual the Manifest we want to make assertions on.
   * @return a new <code>{@link ManifestAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ManifestAssert assertThat(Manifest actual) {
    return new ManifestAssert(actual);
  }

  /**
   * Verifies that the actual Manifest's more is equal to the given one.
   * @param more the given more to compare the actual Manifest's more to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Manifest's more is not equal to the given one.
   */
  public ManifestAssert hasMore(Boolean more) {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting more of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualMore = actual.getMore();
    if (!Objects.deepEquals(actualMore, more)) {
      failWithMessage(assertjErrorMessage, actual, more, actualMore);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Manifest's objects contains the given ManifestRecord elements.
   * @param objects the given elements that should be contained in actual Manifest's objects.
   * @return this assertion object.
   * @throws AssertionError if the actual Manifest's objects does not contain all given ManifestRecord elements.
   */
  public ManifestAssert hasObjects(ManifestRecord... objects) {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // check that given ManifestRecord varargs is not null.
    if (objects == null) failWithMessage("Expecting objects parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getObjects(), objects);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Manifest's objects contains the given ManifestRecord elements in Collection.
   * @param objects the given elements that should be contained in actual Manifest's objects.
   * @return this assertion object.
   * @throws AssertionError if the actual Manifest's objects does not contain all given ManifestRecord elements.
   */
  public ManifestAssert hasObjects(java.util.Collection<? extends ManifestRecord> objects) {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // check that given ManifestRecord collection is not null.
    if (objects == null) {
      failWithMessage("Expecting objects parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getObjects(), objects.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Manifest's objects contains <b>only</b> the given ManifestRecord elements and nothing else in whatever order.
   * @param objects the given elements that should be contained in actual Manifest's objects.
   * @return this assertion object.
   * @throws AssertionError if the actual Manifest's objects does not contain all given ManifestRecord elements.
   */
  public ManifestAssert hasOnlyObjects(ManifestRecord... objects) {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // check that given ManifestRecord varargs is not null.
    if (objects == null) failWithMessage("Expecting objects parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getObjects(), objects);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Manifest's objects contains <b>only</b> the given ManifestRecord elements in Collection and nothing else in whatever order.
   * @param objects the given elements that should be contained in actual Manifest's objects.
   * @return this assertion object.
   * @throws AssertionError if the actual Manifest's objects does not contain all given ManifestRecord elements.
   */
  public ManifestAssert hasOnlyObjects(java.util.Collection<? extends ManifestRecord> objects) {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // check that given ManifestRecord collection is not null.
    if (objects == null) {
      failWithMessage("Expecting objects parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getObjects(), objects.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Manifest's objects does not contain the given ManifestRecord elements.
   *
   * @param objects the given elements that should not be in actual Manifest's objects.
   * @return this assertion object.
   * @throws AssertionError if the actual Manifest's objects contains any given ManifestRecord elements.
   */
  public ManifestAssert doesNotHaveObjects(ManifestRecord... objects) {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // check that given ManifestRecord varargs is not null.
    if (objects == null) failWithMessage("Expecting objects parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getObjects(), objects);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Manifest's objects does not contain the given ManifestRecord elements in Collection.
   *
   * @param objects the given elements that should not be in actual Manifest's objects.
   * @return this assertion object.
   * @throws AssertionError if the actual Manifest's objects contains any given ManifestRecord elements.
   */
  public ManifestAssert doesNotHaveObjects(java.util.Collection<? extends ManifestRecord> objects) {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // check that given ManifestRecord collection is not null.
    if (objects == null) {
      failWithMessage("Expecting objects parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getObjects(), objects.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Manifest has no objects.
   * @return this assertion object.
   * @throws AssertionError if the actual Manifest's objects is not empty.
   */
  public ManifestAssert hasNoObjects() {
    // check that actual Manifest we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have objects but had :\n  <%s>";

    // check
    if (actual.getObjects().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getObjects());
    }

    // return the current assertion for method chaining
    return this;
  }


}
