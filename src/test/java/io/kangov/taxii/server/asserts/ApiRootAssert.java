package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.ApiRoot;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link ApiRoot} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ApiRootAssert extends AbstractObjectAssert<ApiRootAssert, ApiRoot> {

  /**
   * Creates a new <code>{@link ApiRootAssert}</code> to make assertions on actual ApiRoot.
   * @param actual the ApiRoot we want to make assertions on.
   */
  public ApiRootAssert(ApiRoot actual) {
    super(actual, ApiRootAssert.class);
  }

  /**
   * An entry point for ApiRootAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myApiRoot)</code> and get specific assertion with code completion.
   * @param actual the ApiRoot we want to make assertions on.
   * @return a new <code>{@link ApiRootAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ApiRootAssert assertThat(ApiRoot actual) {
    return new ApiRootAssert(actual);
  }

  /**
   * Verifies that the actual ApiRoot's description is equal to the given one.
   * @param description the given description to compare the actual ApiRoot's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ApiRoot's description is not equal to the given one.
   */
  public ApiRootAssert hasDescription(String description) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.deepEquals(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's maxContentLength is equal to the given one.
   * @param maxContentLength the given maxContentLength to compare the actual ApiRoot's maxContentLength to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ApiRoot's maxContentLength is not equal to the given one.
   */
  public ApiRootAssert hasMaxContentLength(Integer maxContentLength) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting maxContentLength of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualMaxContentLength = actual.getMaxContentLength();
    if (!Objects.deepEquals(actualMaxContentLength, maxContentLength)) {
      failWithMessage(assertjErrorMessage, actual, maxContentLength, actualMaxContentLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's title is equal to the given one.
   * @param title the given title to compare the actual ApiRoot's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ApiRoot's title is not equal to the given one.
   */
  public ApiRootAssert hasTitle(String title) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.deepEquals(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's versions contains the given String elements.
   * @param versions the given elements that should be contained in actual ApiRoot's versions.
   * @return this assertion object.
   * @throws AssertionError if the actual ApiRoot's versions does not contain all given String elements.
   */
  public ApiRootAssert hasVersions(String... versions) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (versions == null) failWithMessage("Expecting versions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVersions(), versions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's versions contains the given String elements in Collection.
   * @param versions the given elements that should be contained in actual ApiRoot's versions.
   * @return this assertion object.
   * @throws AssertionError if the actual ApiRoot's versions does not contain all given String elements.
   */
  public ApiRootAssert hasVersions(java.util.Collection<? extends String> versions) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (versions == null) {
      failWithMessage("Expecting versions parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVersions(), versions.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's versions contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param versions the given elements that should be contained in actual ApiRoot's versions.
   * @return this assertion object.
   * @throws AssertionError if the actual ApiRoot's versions does not contain all given String elements.
   */
  public ApiRootAssert hasOnlyVersions(String... versions) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (versions == null) failWithMessage("Expecting versions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVersions(), versions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's versions contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param versions the given elements that should be contained in actual ApiRoot's versions.
   * @return this assertion object.
   * @throws AssertionError if the actual ApiRoot's versions does not contain all given String elements.
   */
  public ApiRootAssert hasOnlyVersions(java.util.Collection<? extends String> versions) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (versions == null) {
      failWithMessage("Expecting versions parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVersions(), versions.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's versions does not contain the given String elements.
   *
   * @param versions the given elements that should not be in actual ApiRoot's versions.
   * @return this assertion object.
   * @throws AssertionError if the actual ApiRoot's versions contains any given String elements.
   */
  public ApiRootAssert doesNotHaveVersions(String... versions) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (versions == null) failWithMessage("Expecting versions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVersions(), versions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot's versions does not contain the given String elements in Collection.
   *
   * @param versions the given elements that should not be in actual ApiRoot's versions.
   * @return this assertion object.
   * @throws AssertionError if the actual ApiRoot's versions contains any given String elements.
   */
  public ApiRootAssert doesNotHaveVersions(java.util.Collection<? extends String> versions) {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (versions == null) {
      failWithMessage("Expecting versions parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVersions(), versions.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ApiRoot has no versions.
   * @return this assertion object.
   * @throws AssertionError if the actual ApiRoot's versions is not empty.
   */
  public ApiRootAssert hasNoVersions() {
    // check that actual ApiRoot we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have versions but had :\n  <%s>";

    // check
    if (actual.getVersions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVersions());
    }

    // return the current assertion for method chaining
    return this;
  }


}
