package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.Dictionary;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link Dictionary} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class DictionaryAssert extends AbstractObjectAssert<DictionaryAssert, Dictionary> {

  /**
   * Creates a new <code>{@link DictionaryAssert}</code> to make assertions on actual Dictionary.
   * @param actual the Dictionary we want to make assertions on.
   */
  public DictionaryAssert(Dictionary actual) {
    super(actual, DictionaryAssert.class);
  }

  /**
   * An entry point for DictionaryAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myDictionary)</code> and get specific assertion with code completion.
   * @param actual the Dictionary we want to make assertions on.
   * @return a new <code>{@link DictionaryAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static DictionaryAssert assertThat(Dictionary actual) {
    return new DictionaryAssert(actual);
  }

  /**
   * Verifies that the actual Dictionary's dictionary is equal to the given one.
   * @param dictionary the given dictionary to compare the actual Dictionary's dictionary to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Dictionary's dictionary is not equal to the given one.
   */
  public DictionaryAssert hasDictionary(java.util.Map dictionary) {
    // check that actual Dictionary we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dictionary of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualDictionary = actual.getDictionary();
    if (!Objects.deepEquals(actualDictionary, dictionary)) {
      failWithMessage(assertjErrorMessage, actual, dictionary, actualDictionary);
    }

    // return the current assertion for method chaining
    return this;
  }

}
