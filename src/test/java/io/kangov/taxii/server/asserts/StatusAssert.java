package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.RequestStatus;
import io.kangov.taxii.server.web.model.Status;
import io.kangov.taxii.server.web.model.StatusDetails;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link Status} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class StatusAssert extends AbstractObjectAssert<StatusAssert, Status> {

  /**
   * Creates a new <code>{@link StatusAssert}</code> to make assertions on actual Status.
   * @param actual the Status we want to make assertions on.
   */
  public StatusAssert(Status actual) {
    super(actual, StatusAssert.class);
  }

  /**
   * An entry point for StatusAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myStatus)</code> and get specific assertion with code completion.
   * @param actual the Status we want to make assertions on.
   * @return a new <code>{@link StatusAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static StatusAssert assertThat(Status actual) {
    return new StatusAssert(actual);
  }

  /**
   * Verifies that the actual Status's failureCount is equal to the given one.
   * @param failureCount the given failureCount to compare the actual Status's failureCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Status's failureCount is not equal to the given one.
   */
  public StatusAssert hasFailureCount(Integer failureCount) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting failureCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualFailureCount = actual.getFailureCount();
    if (!Objects.deepEquals(actualFailureCount, failureCount)) {
      failWithMessage(assertjErrorMessage, actual, failureCount, actualFailureCount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's failures contains the given StatusDetails elements.
   * @param failures the given elements that should be contained in actual Status's failures.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's failures does not contain all given StatusDetails elements.
   */
  public StatusAssert hasFailures(StatusDetails... failures) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (failures == null) failWithMessage("Expecting failures parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFailures(), failures);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's failures contains the given StatusDetails elements in Collection.
   * @param failures the given elements that should be contained in actual Status's failures.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's failures does not contain all given StatusDetails elements.
   */
  public StatusAssert hasFailures(java.util.Collection<? extends StatusDetails> failures) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (failures == null) {
      failWithMessage("Expecting failures parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFailures(), failures.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's failures contains <b>only</b> the given StatusDetails elements and nothing else in whatever order.
   * @param failures the given elements that should be contained in actual Status's failures.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's failures does not contain all given StatusDetails elements.
   */
  public StatusAssert hasOnlyFailures(StatusDetails... failures) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (failures == null) failWithMessage("Expecting failures parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFailures(), failures);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's failures contains <b>only</b> the given StatusDetails elements in Collection and nothing else in whatever order.
   * @param failures the given elements that should be contained in actual Status's failures.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's failures does not contain all given StatusDetails elements.
   */
  public StatusAssert hasOnlyFailures(java.util.Collection<? extends StatusDetails> failures) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (failures == null) {
      failWithMessage("Expecting failures parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFailures(), failures.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's failures does not contain the given StatusDetails elements.
   *
   * @param failures the given elements that should not be in actual Status's failures.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's failures contains any given StatusDetails elements.
   */
  public StatusAssert doesNotHaveFailures(StatusDetails... failures) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (failures == null) failWithMessage("Expecting failures parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFailures(), failures);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's failures does not contain the given StatusDetails elements in Collection.
   *
   * @param failures the given elements that should not be in actual Status's failures.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's failures contains any given StatusDetails elements.
   */
  public StatusAssert doesNotHaveFailures(java.util.Collection<? extends StatusDetails> failures) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (failures == null) {
      failWithMessage("Expecting failures parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFailures(), failures.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status has no failures.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's failures is not empty.
   */
  public StatusAssert hasNoFailures() {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have failures but had :\n  <%s>";

    // check
    if (actual.getFailures().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getFailures());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Status's id is equal to the given one.
   * @param id the given id to compare the actual Status's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Status's id is not equal to the given one.
   */
  public StatusAssert hasId(java.util.UUID id) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.deepEquals(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's pendingCount is equal to the given one.
   * @param pendingCount the given pendingCount to compare the actual Status's pendingCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Status's pendingCount is not equal to the given one.
   */
  public StatusAssert hasPendingCount(Integer pendingCount) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pendingCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualPendingCount = actual.getPendingCount();
    if (!Objects.deepEquals(actualPendingCount, pendingCount)) {
      failWithMessage(assertjErrorMessage, actual, pendingCount, actualPendingCount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's pendings contains the given StatusDetails elements.
   * @param pendings the given elements that should be contained in actual Status's pendings.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's pendings does not contain all given StatusDetails elements.
   */
  public StatusAssert hasPendings(StatusDetails... pendings) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (pendings == null) failWithMessage("Expecting pendings parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPendings(), pendings);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's pendings contains the given StatusDetails elements in Collection.
   * @param pendings the given elements that should be contained in actual Status's pendings.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's pendings does not contain all given StatusDetails elements.
   */
  public StatusAssert hasPendings(java.util.Collection<? extends StatusDetails> pendings) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (pendings == null) {
      failWithMessage("Expecting pendings parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPendings(), pendings.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's pendings contains <b>only</b> the given StatusDetails elements and nothing else in whatever order.
   * @param pendings the given elements that should be contained in actual Status's pendings.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's pendings does not contain all given StatusDetails elements.
   */
  public StatusAssert hasOnlyPendings(StatusDetails... pendings) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (pendings == null) failWithMessage("Expecting pendings parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPendings(), pendings);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's pendings contains <b>only</b> the given StatusDetails elements in Collection and nothing else in whatever order.
   * @param pendings the given elements that should be contained in actual Status's pendings.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's pendings does not contain all given StatusDetails elements.
   */
  public StatusAssert hasOnlyPendings(java.util.Collection<? extends StatusDetails> pendings) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (pendings == null) {
      failWithMessage("Expecting pendings parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPendings(), pendings.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's pendings does not contain the given StatusDetails elements.
   *
   * @param pendings the given elements that should not be in actual Status's pendings.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's pendings contains any given StatusDetails elements.
   */
  public StatusAssert doesNotHavePendings(StatusDetails... pendings) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (pendings == null) failWithMessage("Expecting pendings parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPendings(), pendings);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's pendings does not contain the given StatusDetails elements in Collection.
   *
   * @param pendings the given elements that should not be in actual Status's pendings.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's pendings contains any given StatusDetails elements.
   */
  public StatusAssert doesNotHavePendings(java.util.Collection<? extends StatusDetails> pendings) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (pendings == null) {
      failWithMessage("Expecting pendings parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPendings(), pendings.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status has no pendings.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's pendings is not empty.
   */
  public StatusAssert hasNoPendings() {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have pendings but had :\n  <%s>";

    // check
    if (actual.getPendings().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPendings());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Status's requestTimestamp is equal to the given one.
   * @param requestTimestamp the given requestTimestamp to compare the actual Status's requestTimestamp to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Status's requestTimestamp is not equal to the given one.
   */
  public StatusAssert hasRequestTimestamp(java.time.OffsetDateTime requestTimestamp) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting requestTimestamp of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.OffsetDateTime actualRequestTimestamp = actual.getRequestTimestamp();
    if (!Objects.deepEquals(actualRequestTimestamp, requestTimestamp)) {
      failWithMessage(assertjErrorMessage, actual, requestTimestamp, actualRequestTimestamp);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's status is equal to the given one.
   * @param status the given status to compare the actual Status's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Status's status is not equal to the given one.
   */
  public StatusAssert hasStatus(RequestStatus status) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    RequestStatus actualStatus = actual.getStatus();
    if (!Objects.deepEquals(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's successCount is equal to the given one.
   * @param successCount the given successCount to compare the actual Status's successCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Status's successCount is not equal to the given one.
   */
  public StatusAssert hasSuccessCount(Integer successCount) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting successCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualSuccessCount = actual.getSuccessCount();
    if (!Objects.deepEquals(actualSuccessCount, successCount)) {
      failWithMessage(assertjErrorMessage, actual, successCount, actualSuccessCount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's successes contains the given StatusDetails elements.
   * @param successes the given elements that should be contained in actual Status's successes.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's successes does not contain all given StatusDetails elements.
   */
  public StatusAssert hasSuccesses(StatusDetails... successes) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (successes == null) failWithMessage("Expecting successes parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSuccesses(), successes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's successes contains the given StatusDetails elements in Collection.
   * @param successes the given elements that should be contained in actual Status's successes.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's successes does not contain all given StatusDetails elements.
   */
  public StatusAssert hasSuccesses(java.util.Collection<? extends StatusDetails> successes) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (successes == null) {
      failWithMessage("Expecting successes parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSuccesses(), successes.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's successes contains <b>only</b> the given StatusDetails elements and nothing else in whatever order.
   * @param successes the given elements that should be contained in actual Status's successes.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's successes does not contain all given StatusDetails elements.
   */
  public StatusAssert hasOnlySuccesses(StatusDetails... successes) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (successes == null) failWithMessage("Expecting successes parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSuccesses(), successes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's successes contains <b>only</b> the given StatusDetails elements in Collection and nothing else in whatever order.
   * @param successes the given elements that should be contained in actual Status's successes.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's successes does not contain all given StatusDetails elements.
   */
  public StatusAssert hasOnlySuccesses(java.util.Collection<? extends StatusDetails> successes) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (successes == null) {
      failWithMessage("Expecting successes parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSuccesses(), successes.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's successes does not contain the given StatusDetails elements.
   *
   * @param successes the given elements that should not be in actual Status's successes.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's successes contains any given StatusDetails elements.
   */
  public StatusAssert doesNotHaveSuccesses(StatusDetails... successes) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails varargs is not null.
    if (successes == null) failWithMessage("Expecting successes parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSuccesses(), successes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status's successes does not contain the given StatusDetails elements in Collection.
   *
   * @param successes the given elements that should not be in actual Status's successes.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's successes contains any given StatusDetails elements.
   */
  public StatusAssert doesNotHaveSuccesses(java.util.Collection<? extends StatusDetails> successes) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // check that given StatusDetails collection is not null.
    if (successes == null) {
      failWithMessage("Expecting successes parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSuccesses(), successes.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Status has no successes.
   * @return this assertion object.
   * @throws AssertionError if the actual Status's successes is not empty.
   */
  public StatusAssert hasNoSuccesses() {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have successes but had :\n  <%s>";

    // check
    if (actual.getSuccesses().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSuccesses());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Status's totalCount is equal to the given one.
   * @param totalCount the given totalCount to compare the actual Status's totalCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Status's totalCount is not equal to the given one.
   */
  public StatusAssert hasTotalCount(Integer totalCount) {
    // check that actual Status we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting totalCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualTotalCount = actual.getTotalCount();
    if (!Objects.deepEquals(actualTotalCount, totalCount)) {
      failWithMessage(assertjErrorMessage, actual, totalCount, actualTotalCount);
    }

    // return the current assertion for method chaining
    return this;
  }

}
