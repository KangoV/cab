package io.kangov.taxii.server.asserts;

import java.util.Objects;

import io.kangov.taxii.server.web.model.Discovery;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link Discovery} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class DiscoveryAssert extends AbstractObjectAssert<DiscoveryAssert, Discovery> {

  /**
   * Creates a new <code>{@link DiscoveryAssert}</code> to make assertions on actual Discovery.
   * @param actual the Discovery we want to make assertions on.
   */
  public DiscoveryAssert(Discovery actual) {
    super(actual, DiscoveryAssert.class);
  }

  /**
   * An entry point for DiscoveryAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myDiscovery)</code> and get specific assertion with code completion.
   * @param actual the Discovery we want to make assertions on.
   * @return a new <code>{@link DiscoveryAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static DiscoveryAssert assertThat(Discovery actual) {
    return new DiscoveryAssert(actual);
  }

  /**
   * Verifies that the actual Discovery's apiRoots contains the given String elements.
   * @param apiRoots the given elements that should be contained in actual Discovery's apiRoots.
   * @return this assertion object.
   * @throws AssertionError if the actual Discovery's apiRoots does not contain all given String elements.
   */
  public DiscoveryAssert hasApiRoots(String... apiRoots) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (apiRoots == null) failWithMessage("Expecting apiRoots parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getApiRoots(), apiRoots);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's apiRoots contains the given String elements in Collection.
   * @param apiRoots the given elements that should be contained in actual Discovery's apiRoots.
   * @return this assertion object.
   * @throws AssertionError if the actual Discovery's apiRoots does not contain all given String elements.
   */
  public DiscoveryAssert hasApiRoots(java.util.Collection<? extends String> apiRoots) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (apiRoots == null) {
      failWithMessage("Expecting apiRoots parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getApiRoots(), apiRoots.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's apiRoots contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param apiRoots the given elements that should be contained in actual Discovery's apiRoots.
   * @return this assertion object.
   * @throws AssertionError if the actual Discovery's apiRoots does not contain all given String elements.
   */
  public DiscoveryAssert hasOnlyApiRoots(String... apiRoots) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (apiRoots == null) failWithMessage("Expecting apiRoots parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getApiRoots(), apiRoots);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's apiRoots contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param apiRoots the given elements that should be contained in actual Discovery's apiRoots.
   * @return this assertion object.
   * @throws AssertionError if the actual Discovery's apiRoots does not contain all given String elements.
   */
  public DiscoveryAssert hasOnlyApiRoots(java.util.Collection<? extends String> apiRoots) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (apiRoots == null) {
      failWithMessage("Expecting apiRoots parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getApiRoots(), apiRoots.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's apiRoots does not contain the given String elements.
   *
   * @param apiRoots the given elements that should not be in actual Discovery's apiRoots.
   * @return this assertion object.
   * @throws AssertionError if the actual Discovery's apiRoots contains any given String elements.
   */
  public DiscoveryAssert doesNotHaveApiRoots(String... apiRoots) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (apiRoots == null) failWithMessage("Expecting apiRoots parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getApiRoots(), apiRoots);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's apiRoots does not contain the given String elements in Collection.
   *
   * @param apiRoots the given elements that should not be in actual Discovery's apiRoots.
   * @return this assertion object.
   * @throws AssertionError if the actual Discovery's apiRoots contains any given String elements.
   */
  public DiscoveryAssert doesNotHaveApiRoots(java.util.Collection<? extends String> apiRoots) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (apiRoots == null) {
      failWithMessage("Expecting apiRoots parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getApiRoots(), apiRoots.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery has no apiRoots.
   * @return this assertion object.
   * @throws AssertionError if the actual Discovery's apiRoots is not empty.
   */
  public DiscoveryAssert hasNoApiRoots() {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have apiRoots but had :\n  <%s>";

    // check
    if (actual.getApiRoots().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getApiRoots());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Discovery's contact is equal to the given one.
   * @param contact the given contact to compare the actual Discovery's contact to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Discovery's contact is not equal to the given one.
   */
  public DiscoveryAssert hasContact(String contact) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting contact of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualContact = actual.getContact();
    if (!Objects.deepEquals(actualContact, contact)) {
      failWithMessage(assertjErrorMessage, actual, contact, actualContact);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's default is equal to the given one.
   * @param expectedDefault the given default to compare the actual Discovery's default to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Discovery's default is not equal to the given one.
   */
  public DiscoveryAssert hasDefault(String expectedDefault) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting default of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDefault = actual.getDefault();
    if (!Objects.deepEquals(actualDefault, expectedDefault)) {
      failWithMessage(assertjErrorMessage, actual, expectedDefault, actualDefault);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's description is equal to the given one.
   * @param description the given description to compare the actual Discovery's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Discovery's description is not equal to the given one.
   */
  public DiscoveryAssert hasDescription(String description) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.deepEquals(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Discovery's title is equal to the given one.
   * @param title the given title to compare the actual Discovery's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Discovery's title is not equal to the given one.
   */
  public DiscoveryAssert hasTitle(String title) {
    // check that actual Discovery we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.deepEquals(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

}
